// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./gwbi.db"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model User {
  id                      String            @id @unique @default(cuid())
  firstName               String
  lastName                String?
  email                   String            @unique
  contact                 String?
  address                 String?
  logoPath                String?
  password                String
  verificationCode        String?
  passwordResetCode       String?
  isActive                Boolean           @default(false)
  isAdmin                 Boolean           @default(false)
  isLocked                Boolean           @default(false)
  loginAttempts           Int               @default(0)
  isPasswordResetRequired Boolean           @default(true)
  isAuthenticatorEnabled  Boolean?          @default(false)
  authenticatorSecret     String?
  authenticatorUrl        String?
  tenant                  Tenant?           @relation(fields: [tenantId], references: [id])
  tenantId                String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  UserRoles               UserRole[]
  Menus                   Menu[]
  UserTenant              UserTenant[]
  UserUserRole            UserUserRole[]
  Ticket                  Ticket[]
  TicketLog               TicketLog[]
  NotificationLog         NotificationLog[]
  // Renaming relationships for clarity
  createdNotifications    Notification[]    @relation("AssignedUser")
  assignedNotifications   Notification[]    @relation("CreatedByUser")
  loginAudit              LoginAudit[]
}

model Tenant {
  id                String         @id @default(cuid())
  name              String         @unique
  contact           String?
  address           String?
  clientId          String?
  secretKey         String?
  logoPath          String?
  homeUrl           String?
  mobileUrl         String?
  bgColor           String         @default("#000000")
  textColor         String         @default("#ffffff")
  textHoverColor    String         @default("#ffffff")
  borderColor       String         @default("#000010")
  categoryTextColor String         @default("#ffffff")
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  UserRole          UserRole[]
  Menu              Menu[]
  User              User[]
  UserTenant        UserTenant[]
  Ticket            Ticket[]
  Notification      Notification[]
}

model UserRole {
  id           String         @id @default(cuid())
  name         String
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    User?          @relation(fields: [userId], references: [id])
  userId       String?
  tenant       Tenant?        @relation(fields: [tenantId], references: [id])
  tenantId     String?
  UserRoleMenu UserRoleMenu[]
  UserUserRole UserUserRole[]
  Notification Notification[]

  @@unique([name, tenantId])
}

model Menu {
  id           String         @id @default(cuid())
  name         String
  category     String?
  order        Int
  url          String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    User?          @relation(fields: [userId], references: [id])
  userId       String?
  tenant       Tenant?        @relation(fields: [tenantId], references: [id])
  tenantId     String?
  UserRoleMenu UserRoleMenu[]

  @@unique([name, tenantId, category])
}

model UserTenant {
  id       String  @id @default(cuid())
  user     User?   @relation(fields: [userId], references: [id])
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  userId   String?
  tenantId String?

  @@unique([userId, tenantId])
  @@index([userId])
}

model UserRoleMenu {
  id         String    @id @default(cuid())
  userRole   UserRole? @relation(fields: [userRoleId], references: [id])
  menu       Menu?     @relation(fields: [menuId], references: [id])
  userRoleId String?
  menuId     String?

  @@unique([userRoleId, menuId])
  @@index([userRoleId])
}

model UserUserRole {
  id         String    @id @default(cuid())
  user       User?     @relation(fields: [userId], references: [id])
  userRole   UserRole? @relation(fields: [userRoleId], references: [id])
  userId     String?
  userRoleId String?

  @@unique([userId, userRoleId])
  @@index([userId])
}

model Ticket {
  id         String      @id @default(cuid())
  title      String
  content    String
  attachment String?
  status     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
  tenant     Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId   String?
  TicketLog  TicketLog[]
}

model TicketLog {
  id         String   @id @default(cuid())
  note       String
  attachment String?
  ticket     Ticket?  @relation(fields: [ticketId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ticketId   String?
  userId     String?
}

model Notification {
  id              String            @id @default(cuid())
  title           String
  message         String
  isSendEmail     Boolean           @default(false)
  sent            Boolean           @default(false)
  generated       Boolean           @default(false)
  tenant          Tenant?           @relation(fields: [tenantId], references: [id])
  userRole        UserRole?         @relation(fields: [userRoleId], references: [id])
  assignedUser    User?             @relation(name: "AssignedUser", fields: [assignedUserId], references: [id])
  createdBy       User?             @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  assignedUserId  String?
  createdById     String?
  tenantId        String?
  NotificationLog NotificationLog[]
  userRoleId      String?
}

model NotificationLog {
  id             String        @id @default(cuid())
  notification   Notification? @relation(fields: [notificationId], references: [id])
  sent           Boolean       @default(false)
  read           Boolean       @default(false)
  user           User?         @relation(fields: [userId], references: [id])
  notificationId String?
  userId         String?
}

model LoginAudit {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userName  String?
  remarks   String?
  createdAt DateTime @default(now())
  status    String?
  userId    String?
}
